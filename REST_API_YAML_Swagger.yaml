openapi: 3.0.0
info:
  description: This API represents the MeasureX interface to compute performance 5G measurements.
  version: 1.0.0
  title: MeasureX RestAPI
  contact:
    email: mymail@mail.it
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /measureX:
    get:
      summary: Get MeasureX system info
      description: This endpoint returns info about the MeasureX tool.
      responses:
        '200':
          description: 'Get Info MeasureX'
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string
                    example: 'Measure X is a tool that helps you to perform 5G measurements, including latency, throughput, jitter, Age of Information, and Power Consumption analysis.'
        '404':
          description: Info measureX not found
        '500':
          description: Error Get info measureX
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      operationId: get_measurex_general_info
      
  '/measurements/{measurement_id}':
    get:
      summary: Retrieve a specific measurement by ID.
      description: "Returns the JSON object representing the measurement with the specified ID.\r\nIf the ID does not exist, a 500 error is returned."
      parameters:
        - name: measurement_id
          in: path
          required: true
          description: The parameter measurement_id is the ID of the measurement to retrieve from mongoDB server.
          schema:
            type: integer
      responses:
        '200':
          description: Measurement retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementModelMongo'
        '500':
          description: Error Get info measureX
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      operationId: get_measurement_by_id
    delete:
      summary: Stop a measurement by ID.
      description: Stops an active measurement with the given ID. Returns an error if the measurement does not exist or is already stopped.
      parameters:
        - name: measurement_id
          in: path
          required: true
          description: The ID of the measurement to stop.
          schema:
            type: integer
      responses:
        '200':
          description: Measurement stopped successfully.
        '500':
          description: Error Get info measureX
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      operationId: stop_measurement_by_id
      
  /measurements:
    get:
      summary: Retrieve all measurements.
      description: Returns a list of all measurements in the database.
      responses:
        '200':
          description: Measurements retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeasurementModelMongo'
        '500':
          description: Error Get info measureX
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      operationId: get_all_measurements
    post:
      summary: Create a new measurement.
      description: "With this enpoint, you can create a the measurement in the payload. \r\nBeware of required measurement fields.\r\nReturns an error if required fields are missing."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeasurementModelMongo'
      responses:
        '200':
          description: Measurement created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MeasurementModelMongo'
        '500':
          description: Invalid JSON payload or missing required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
      operationId: create_measurement
  '/results/{result_id}':
    get:
      summary: Retrieve a specific result by ID.
      description: "Returns the JSON object representing the result with the specified ID.\r\nIf the ID does not exist, a 500 error is returned."
      parameters:
        - name: result_id
          in: path
          required: true
          description: The ID of the result to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: Result retrieved successfully.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IperfResultModelMongo'
                  - $ref: '#/components/schemas/PingResultModelMongo'
                  - $ref: '#/components/schemas/EnergyResultModelMongo'
                  - $ref: '#/components/schemas/AoIResultModelMongo'
        '500':
          description: Result not found.
      operationId: getResultById
  /results:
    get:
      summary: Retrieve all results.
      description: Returns a list of all results in the database.
      responses:
        '200':
          description: Results retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    result:
                      type: string
                    timestamp:
                      type: string
      operationId: getAllResults

components:
  schemas:
    MeasurementModelMongo:
      type: object
      description: Measurement model stored on mongoDB
      properties:
        _id:
          type: string
          description: Unique MongoID for the measurement (auto-generated by the MongoDB).
        description:
          type: string
          description: Description of the measurement.
        type:
          type: string
          description: Type of the measurement (e.g., latency, throughput...).
        state:
          type: string
          description: Current state of the measurement (e.g., STARTED, STOPPED...).
        start_time:
          type: string
          format: date-time
          description: The time the measurement started.
        source_probe:
          type: string
          description: Identifier for the source probe.
        dest_probe:
          type: string
          description: Identifier for the destination probe.
        source_probe_ip:
          type: string
          format: ipv4
          description: IP address of the source probe.
        dest_probe_ip:
          type: string
          format: ipv4
          description: IP address of the destination probe.
        gps_source_probe:
          type: string
          description: GPS coordinates for the source probe.
        gps_dest_probe:
          type: string
          description: GPS coordinates for the destination probe.
        coexisting_application:
          $ref: '#/components/schemas/CoexistingApplication'
        stop_time:
          type: string
          format: date-time
          description: The time the measurement stopped (if available).
      required:
      #  - _id -> The _id is not required because when you're inserting a new measure, the _id must be chosen by MongoDB
        - description
        - type
        - state
        - start_time
        - source_probe
        - dest_probe
        - source_probe_ip
        - dest_probe_ip
        
    IperfResultModelMongo:
      type: object
      properties:
        _id:
          type: string
          description: "Unique MongoID for the measurement result"
        measure_reference:
          type: string
          description: Reference ID to the associated measurement
        repetition_number:
          type: integer
          description: Number of the repetition for this measurement
        transport_protocol:
          type: string
          description: Transport protocol used (e.g., TCP, UDP)
          example: TCP
        start_timestamp:
          type: string
          format: date-time
          description: Timestamp when the measurement started
        source_ip:
          type: string
          format: ipv4
          description: Source IP address for the measurement
        source_port:
          type: integer
          description: Source port for the measurement
          example: 8080
        destination_ip:
          type: string
          format: ipv4
          description: Destination IP address for the measurement
        destination_port:
          type: integer
          description: Destination port for the measurement
          example: 8080
        bytes_received:
          type: integer
          description: Total number of bytes received during the measurement
        duration:
          type: number
          format: float
          description: Duration of the measurement in seconds
        avg_speed:
          type: number
          format: float
          description: Average speed during the measurement in bytes per second
      example:
        _id: "64db3ad8b8591e001c1a1f3c"
        measure_reference: "measurement-123"
        repetition_number: 1
        transport_protocol: "TCP"
        start_timestamp: "2025-01-17T10:00:00Z"
        source_ip: "192.168.1.1"
        source_port: 8080
        destination_ip: "192.168.1.2"
        destination_port: 80
        bytes_received: 1048576
        duration: 12.5
        avg_speed: 83886.4
        
    PingResultModelMongo:
      type: object
      properties:
        _id:
          type: string
          description: Unique MongoID for the result
        measure_reference:
          type: string
          description: A measureID reference to the measurement to which the ping result is related.
        start_timestamp:
          type: string
          format: date-time
          description: Timestamp when the ping test started.
        rtt_avg:
          type: number
          format: float
          description: The average round-trip time (RTT) in milliseconds.
        rtt_max:
          type: number
          format: float
          description: The maximum RTT observed during the test.
        rtt_min:
          type: number
          format: float
          description: The minimum RTT observed during the test.
        rtt_mdev:
          type: number
          format: float
          description: The mean deviation of the RTT values.
        packets_sent:
          type: integer
          description: The number of packets sent during the ping test.
        packets_received:
          type: integer
          description: The number of packets received during the ping test.
        packets_loss_count:
          type: integer
          description: The number of packets lost during the ping test.
        packets_loss_rate:
          type: number
          format: float
          description: The packet loss rate expressed as a percentage.
        icmp_replies:
          type: array
          items:
            type: object
          description: List of ICMP replies received during the ping test.

    AoIResultModelMongo:
      type: object
      properties:
        _id:
          type: string
          description: "Unique MongoID for the Age of Information result"

    EnergyResultModelMongo:
      type: object
      properties:
        _id:
          type: string
          description: "Unique MongoID for the Energy result"
        
    CoexistingApplication:
      type: object
      description: Coexisting Application defines the background traffic to simulate a coexsting application
      properties:
        _id: 
          type: string
          description: "Unique id of the coexisting application description"
      required:
        - _id
    
    ErrorModel:
      type: object
      description: ErrorModel describes an object to have more info about error 
      properties:
        object_ref_id: 
          type: string
          description: "This field is the object id  referred to occurred error"
        object_ref_type:
          type: string
          description: "This field is the object type referred to the occurred error"
        error_description:
          type: string
          description: "The field is the occurred error description"
        error_cause:
          type: string
          description: "The field is the occurred error cause"
      required:
        - object_ref_id
        - object_ref_type
        - error_description
        - error_cause